<?xml version="1.0"?>
<Type Name="EditorApplication" FullName="UnityEditor.EditorApplication">
  <TypeSignature Language="C#" Value="public sealed class EditorApplication"/>
  <AssemblyInfo>
    <AssemblyName>UnityEditor</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces/>
  <Docs>
    <summary>Main Application class.</summary>
    <remarks>(Read Only)</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EditorApplication ();"/>
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters/>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="applicationContentsPath">
      <MemberSignature Language="C#" Value="public static string applicationContentsPath { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Path to the Unity editor contents folder (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="applicationPath">
      <MemberSignature Language="C#" Value="public static string applicationPath { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the path to the Unity editor application (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Plays system beep sound.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="currentScene">
      <MemberSignature Language="C#" Value="public static string currentScene { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The path of the scene that the user has currently open (Will be an empty string if no scene is currently open). (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="delayCall">
      <MemberSignature Language="C#" Value="public static UnityEditor.EditorApplication.CallbackFunction delayCall;"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.EditorApplication+CallbackFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteMenuItem">
      <MemberSignature Language="C#" Value="public static bool ExecuteMenuItem (string menuItemPath);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuItemPath" Type="System.String"/>
      </Parameters>
      <Docs>
        <param name="menuItemPath">To be added.</param>
        <summary>Invokes the menu item in the specified path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (int returnValue);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnValue" Type="System.Int32"/>
      </Parameters>
      <Docs>
        <param name="returnValue">To be added.</param>
        <summary>Exit the Unity editor application.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="hierarchyWindowChanged">
      <MemberSignature Language="C#" Value="public static UnityEditor.EditorApplication.CallbackFunction hierarchyWindowChanged;"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.EditorApplication+CallbackFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="hierarchyWindowItemOnGUI">
      <MemberSignature Language="C#" Value="public static UnityEditor.EditorApplication.HierarchyWindowItemCallback hierarchyWindowItemOnGUI;"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.EditorApplication+HierarchyWindowItemCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate for OnGUI events for every visible list item in the HierarchyWindow.</summary>
        <remarks>See Also: <see cref="P:UnityEditor.EditorApplication.HierarchyWindowItemCallback" />, <see cref="P:UnityEditor.EditorApplication.RepaintHierarchyWindow" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="isCompiling">
      <MemberSignature Language="C#" Value="public static bool isCompiling { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is editor currently compiling scripts? (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="isPaused">
      <MemberSignature Language="C#" Value="public static bool isPaused { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is editor currently paused?</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.isPlaying" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="isPlaying">
      <MemberSignature Language="C#" Value="public static bool isPlaying { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is editor currently in play mode?</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.isPaused" />, <see cref="P:UnityEditor.isPlayingOrWillChangePlaymode" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="isPlayingOrWillChangePlaymode">
      <MemberSignature Language="C#" Value="public static bool isPlayingOrWillChangePlaymode { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is editor either currently in play mode, or about to switch to it? (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="LockReloadAssemblies">
      <MemberSignature Language="C#" Value="public static void LockReloadAssemblies ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Prevents loading of assemblies when it is inconvenient.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="modifierKeysChanged">
      <MemberSignature Language="C#" Value="public static UnityEditor.EditorApplication.CallbackFunction modifierKeysChanged;"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.EditorApplication+CallbackFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate for changed keyboard modifier keys.</summary>
        <remarks>See Also: <see cref="P:UnityEditor.EditorApplication.CallbackFunction" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewScene">
      <MemberSignature Language="C#" Value="public static void NewScene ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Create a new scene</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenProject">
      <MemberSignature Language="C#" Value="public static void OpenProject (string projectPath, string[] args);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectPath" Type="System.String"/>
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="projectPath">To be added.</param>
        <param name="args">To be added.</param>
        <summary>Open another project.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenScene">
      <MemberSignature Language="C#" Value="public static bool OpenScene (string path);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String"/>
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>Opens the scene at path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenSceneAdditive">
      <MemberSignature Language="C#" Value="public static void OpenSceneAdditive (string path);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String"/>
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>Opens the scene at path additively.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="playmodeStateChanged">
      <MemberSignature Language="C#" Value="public static UnityEditor.EditorApplication.CallbackFunction playmodeStateChanged;"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.EditorApplication+CallbackFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate for play mode state changes.</summary>
        <remarks>See Also: <see cref="P:UnityEditor.EditorApplication.CallbackFunction" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="projectWindowChanged">
      <MemberSignature Language="C#" Value="public static UnityEditor.EditorApplication.CallbackFunction projectWindowChanged;"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.EditorApplication+CallbackFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="projectWindowItemOnGUI">
      <MemberSignature Language="C#" Value="public static UnityEditor.EditorApplication.ProjectWindowItemCallback projectWindowItemOnGUI;"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.EditorApplication+ProjectWindowItemCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate for OnGUI events for every visible list item in the ProjectWindow.</summary>
        <remarks>See Also: <see cref="P:UnityEditor.EditorApplication.ProjectWindowItemCallback" />, <see cref="P:UnityEditor.EditorApplication.RepaintProjectWindow" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="RepaintHierarchyWindow">
      <MemberSignature Language="C#" Value="public static void RepaintHierarchyWindow ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Can be used to ensure repaint of the HierarchyWindow.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepaintProjectWindow">
      <MemberSignature Language="C#" Value="public static void RepaintProjectWindow ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Can be used to ensure repaint of the ProjectWindow.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAssets">
      <MemberSignature Language="C#" Value="public static void SaveAssets ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Saves all serializable assets that have not yet been written to disk (eg. Materials)</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveCurrentSceneIfUserWantsTo">
      <MemberSignature Language="C#" Value="public static bool SaveCurrentSceneIfUserWantsTo ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Ask the user if he wants to save the open scene.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveScene">
      <MemberSignature Language="C#" Value="public static bool SaveScene ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Save the open scene.</summary>
        <returns>boolean - True if the save succeeded, otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveScene">
      <MemberSignature Language="C#" Value="public static bool SaveScene (string path);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String"/>
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>Save the open scene.</summary>
        <returns>boolean - True if the save succeeded, otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveScene">
      <MemberSignature Language="C#" Value="public static bool SaveScene (string path, bool saveAsCopy);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String"/>
        <Parameter Name="saveAsCopy" Type="System.Boolean"/>
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="saveAsCopy">To be added.</param>
        <summary>Save the open scene.</summary>
        <returns>boolean - True if the save succeeded, otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="searchChanged">
      <MemberSignature Language="C#" Value="public static UnityEditor.EditorApplication.CallbackFunction searchChanged;"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.EditorApplication+CallbackFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Step">
      <MemberSignature Language="C#" Value="public static void Step ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Perform a single frame step.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="timeSinceStartup">
      <MemberSignature Language="C#" Value="public static double timeSinceStartup { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The time since the editor was started (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockReloadAssemblies">
      <MemberSignature Language="C#" Value="public static void UnlockReloadAssemblies ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Must be called after LockReloadAssemblies, to reenable loading of assemblies.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="update">
      <MemberSignature Language="C#" Value="public static UnityEditor.EditorApplication.CallbackFunction update;"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.EditorApplication+CallbackFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate for generic updates.</summary>
        <remarks>See Also: <see cref="P:UnityEditor.EditorApplication.CallbackFunction" />.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>