<?xml version="1.0"?>
<Type Name="PrefabUtility" FullName="UnityEditor.PrefabUtility">
  <TypeSignature Language="C#" Value="public sealed class PrefabUtility"/>
  <AssemblyInfo>
    <AssemblyName>UnityEditor</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces/>
  <Docs>
    <summary>Utility class for any prefab related operations.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrefabUtility ();"/>
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters/>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEmptyPrefab">
      <MemberSignature Language="C#" Value="public static UnityEngine.Object CreateEmptyPrefab (string path);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String"/>
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>Creates an empty prefab at given path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePrefab">
      <MemberSignature Language="C#" Value="public static UnityEngine.GameObject CreatePrefab (string path, UnityEngine.GameObject go);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.GameObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String"/>
        <Parameter Name="go" Type="UnityEngine.GameObject"/>
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="go">To be added.</param>
        <summary>Creates a prefab from a game object hierarchy</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePrefab">
      <MemberSignature Language="C#" Value="public static UnityEngine.GameObject CreatePrefab (string path, UnityEngine.GameObject go, UnityEditor.ReplacePrefabOptions options);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.GameObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String"/>
        <Parameter Name="go" Type="UnityEngine.GameObject"/>
        <Parameter Name="options" Type="UnityEditor.ReplacePrefabOptions"/>
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="go">To be added.</param>
        <param name="options">To be added.</param>
        <summary>Creates a prefab from a game object hierarchy</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisconnectPrefabInstance">
      <MemberSignature Language="C#" Value="public static void DisconnectPrefabInstance (UnityEngine.Object targetObject);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="targetObject">To be added.</param>
        <summary>Disconnects the prefab instances from it's parent prefab.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPrefabRoot">
      <MemberSignature Language="C#" Value="public static UnityEngine.GameObject FindPrefabRoot (UnityEngine.GameObject source);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.GameObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="UnityEngine.GameObject"/>
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>Helper function to find the prefab root of an object (used for picking niceness)</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindRootGameObjectWithSameParentPrefab">
      <MemberSignature Language="C#" Value="public static UnityEngine.GameObject FindRootGameObjectWithSameParentPrefab (UnityEngine.GameObject target);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.GameObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="UnityEngine.GameObject"/>
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>Returns the topmost game object that has the same prefab parent as target</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindValidUploadPrefabInstanceRoot">
      <MemberSignature Language="C#" Value="public static UnityEngine.GameObject FindValidUploadPrefabInstanceRoot (UnityEngine.GameObject target);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.GameObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="UnityEngine.GameObject"/>
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>Returns root game object of the prefab instance if that root prefab instance is a parent of the prefab.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrefabObject">
      <MemberSignature Language="C#" Value="public static UnityEngine.Object GetPrefabObject (UnityEngine.Object targetObject);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="targetObject">To be added.</param>
        <summary>Retrieves the prefab object representation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrefabParent">
      <MemberSignature Language="C#" Value="public static UnityEngine.Object GetPrefabParent (UnityEngine.Object source);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>Returns the GameObject parent of source, or null if it can't be found.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrefabType">
      <MemberSignature Language="C#" Value="public static UnityEditor.PrefabType GetPrefabType (UnityEngine.Object target);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEditor.PrefabType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>Given an object, returns whether it's a prefab or an instance of a prefab and what kind of prefab it is.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyModifications">
      <MemberSignature Language="C#" Value="public static UnityEditor.PropertyModification[] GetPropertyModifications (UnityEngine.Object targetPrefab);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEditor.PropertyModification[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetPrefab" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="targetPrefab">To be added.</param>
        <summary>Extract all modifications that are applied to the prefab instance compared to the parent prefab.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstantiateAttachedAsset">
      <MemberSignature Language="C#" Value="public static UnityEngine.Object InstantiateAttachedAsset (UnityEngine.Object targetObject);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="targetObject">To be added.</param>
        <summary>Instantiate an asset that is referneced by a prefab and use it on the prefab instance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstantiatePrefab">
      <MemberSignature Language="C#" Value="public static UnityEngine.Object InstantiatePrefab (UnityEngine.Object target);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>Instantiates the given prefab.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsComponentAddedToPrefabInstance">
      <MemberSignature Language="C#" Value="public static bool IsComponentAddedToPrefabInstance (UnityEngine.Object source);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeAllPrefabInstances">
      <MemberSignature Language="C#" Value="public static void MergeAllPrefabInstances (UnityEngine.Object targetObject);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="targetObject">To be added.</param>
        <summary>Force re-merging all prefab instances of this prefab.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReconnectToLastPrefab">
      <MemberSignature Language="C#" Value="public static bool ReconnectToLastPrefab (UnityEngine.GameObject go);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="go" Type="UnityEngine.GameObject"/>
      </Parameters>
      <Docs>
        <param name="go">To be added.</param>
        <summary>Connects the game object to the prefab that it was last connected to.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecordPrefabInstancePropertyModifications">
      <MemberSignature Language="C#" Value="public static void RecordPrefabInstancePropertyModifications (UnityEngine.Object targetObject);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="targetObject">To be added.</param>
        <summary>Force record property modifications by comparing against the parent prefab.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplacePrefab">
      <MemberSignature Language="C#" Value="public static UnityEngine.GameObject ReplacePrefab (UnityEngine.GameObject go, UnityEngine.Object targetPrefab);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.GameObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="go" Type="UnityEngine.GameObject"/>
        <Parameter Name="targetPrefab" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="go">To be added.</param>
        <param name="targetPrefab">To be added.</param>
        <summary>Replaces the targetPrefab with a copy of the game object hierarchy go.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplacePrefab">
      <MemberSignature Language="C#" Value="public static UnityEngine.GameObject ReplacePrefab (UnityEngine.GameObject go, UnityEngine.Object targetPrefab, UnityEditor.ReplacePrefabOptions options);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.GameObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="go" Type="UnityEngine.GameObject"/>
        <Parameter Name="targetPrefab" Type="UnityEngine.Object"/>
        <Parameter Name="options" Type="UnityEditor.ReplacePrefabOptions"/>
      </Parameters>
      <Docs>
        <param name="go">To be added.</param>
        <param name="targetPrefab">To be added.</param>
        <param name="options">To be added.</param>
        <summary>Replaces the targetPrefab with a copy of the game object hierarchy go.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetToPrefabState">
      <MemberSignature Language="C#" Value="public static bool ResetToPrefabState (UnityEngine.Object obj);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="UnityEngine.Object"/>
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>Resets the properties of the component or game object to the parent prefab state</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RevertPrefabInstance">
      <MemberSignature Language="C#" Value="public static bool RevertPrefabInstance (UnityEngine.GameObject go);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="go" Type="UnityEngine.GameObject"/>
      </Parameters>
      <Docs>
        <param name="go">To be added.</param>
        <summary>Resets the properties of all objects in the prefab, including child game objects and components that were added to the prefab insta.ce</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyModifications">
      <MemberSignature Language="C#" Value="public static void SetPropertyModifications (UnityEngine.Object targetPrefab, UnityEditor.PropertyModification[] modifications);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetPrefab" Type="UnityEngine.Object"/>
        <Parameter Name="modifications" Type="UnityEditor.PropertyModification[]"/>
      </Parameters>
      <Docs>
        <param name="targetPrefab">To be added.</param>
        <param name="modifications">To be added.</param>
        <summary>Assigns all modifications that are applied to the prefab instance compared to the parent prefab.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>