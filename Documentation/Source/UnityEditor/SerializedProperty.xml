<?xml version="1.0"?>
<Type Name="SerializedProperty" FullName="UnityEditor.SerializedProperty">
  <TypeSignature Language="C#" Value="public sealed class SerializedProperty"/>
  <AssemblyInfo>
    <AssemblyName>UnityEditor</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces/>
  <Docs>
    <summary>SerializedProperty and <see cref="T:UnityEditor.SerializedObject" /> are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for prefabs.</summary>
    <remarks>See Also: <see cref="T:UnityEditor.SerializedObject" /> class, <see cref="T:UnityEditor.Editor" /> class</remarks>
  </Docs>
  <Members>
    <Member MemberName="animationCurveValue">
      <MemberSignature Language="C#" Value="public UnityEngine.AnimationCurve animationCurveValue { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.AnimationCurve</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value of a animation curve property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.AnimationCurve" />, <see cref="T:UnityEditor.AnimationCurve" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="arraySize">
      <MemberSignature Language="C#" Value="public int arraySize { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of elements in the array.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.isArray" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="boolValue">
      <MemberSignature Language="C#" Value="public bool boolValue { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value of a boolean property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.Boolean" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="boundsValue">
      <MemberSignature Language="C#" Value="public UnityEngine.Bounds boundsValue { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.Bounds</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value of bounds property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.Bounds" />, <see cref="T:UnityEditor.Bounds" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearArray">
      <MemberSignature Language="C#" Value="public void ClearArray ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Remove all elements from the array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="colorValue">
      <MemberSignature Language="C#" Value="public UnityEngine.Color colorValue { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value of a color property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.Color" />, <see cref="T:UnityEditor.Color" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public UnityEditor.SerializedProperty Copy ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.SerializedProperty</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Returns a copy of the SerializedProperty iterator in its current state. This is useful if you want to keep a reference to the current property but continue with the iteration.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountInProperty">
      <MemberSignature Language="C#" Value="public int CountInProperty ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Count visible children of this property, including this property itself.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CountRemaining">
      <MemberSignature Language="C#" Value="public int CountRemaining ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Count remaining visible properties.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteArrayElementAtIndex">
      <MemberSignature Language="C#" Value="public void DeleteArrayElementAtIndex (int index);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32"/>
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Delete the element at the specified index in the array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public bool DeleteCommand ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Deletes the serialized property.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="depth">
      <MemberSignature Language="C#" Value="public int depth { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Nesting depth of the property (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DuplicateCommand">
      <MemberSignature Language="C#" Value="public bool DuplicateCommand ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Duplicates the serialized property.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="editable">
      <MemberSignature Language="C#" Value="public bool editable { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is this property editable? (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="enumNames">
      <MemberSignature Language="C#" Value="public string[] enumNames { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Names of enumeration of an enum property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.Enum" />, <see cref="P:UnityEditor.enumValueIndex" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="enumValueIndex">
      <MemberSignature Language="C#" Value="public int enumValueIndex { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Enum index of an enum property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.Enum" />, <see cref="P:UnityEditor.enumNames" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualContents">
      <MemberSignature Language="C#" Value="public static bool EqualContents (UnityEditor.SerializedProperty x, UnityEditor.SerializedProperty y);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="UnityEditor.SerializedProperty"/>
        <Parameter Name="y" Type="UnityEditor.SerializedProperty"/>
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>See if contained serialized properties are equal.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SerializedProperty ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPropertyRelative">
      <MemberSignature Language="C#" Value="public UnityEditor.SerializedProperty FindPropertyRelative (string relativePropertyPath);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.SerializedProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativePropertyPath" Type="System.String"/>
      </Parameters>
      <Docs>
        <param name="relativePropertyPath">To be added.</param>
        <summary>Retrieves the SerializedProperty at a relative path to the current property.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="floatValue">
      <MemberSignature Language="C#" Value="public float floatValue { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value of a float property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.Float" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayElementAtIndex">
      <MemberSignature Language="C#" Value="public UnityEditor.SerializedProperty GetArrayElementAtIndex (int index);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.SerializedProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32"/>
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Returns the element at the specified index in the array.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEndProperty">
      <MemberSignature Language="C#" Value="public UnityEditor.SerializedProperty GetEndProperty ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.SerializedProperty</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Retrieves the SerializedProperty that defines the end range of this property.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEndProperty">
      <MemberSignature Language="C#" Value="public UnityEditor.SerializedProperty GetEndProperty (bool includeInvisible);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.SerializedProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includeInvisible" Type="System.Boolean"/>
      </Parameters>
      <Docs>
        <param name="includeInvisible">To be added.</param>
        <summary>Retrieves the SerializedProperty that defines the end range of this property.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Retrieves an iterator that allows you to iterator over the current nexting of a serialized property.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="hasChildren">
      <MemberSignature Language="C#" Value="public bool hasChildren { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Does it have child properties? (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="hasMultipleDifferentValues">
      <MemberSignature Language="C#" Value="public bool hasMultipleDifferentValues { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Does this property represent multiple different values due to multi-object editing? (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="hasVisibleChildren">
      <MemberSignature Language="C#" Value="public bool hasVisibleChildren { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Does it have visible child properties? (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertArrayElementAtIndex">
      <MemberSignature Language="C#" Value="public void InsertArrayElementAtIndex (int index);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32"/>
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Insert an empty element at the specified index in the array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="intValue">
      <MemberSignature Language="C#" Value="public int intValue { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value of an integer property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.Integer" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="isArray">
      <MemberSignature Language="C#" Value="public bool isArray { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is this property an array? (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="isExpanded">
      <MemberSignature Language="C#" Value="public bool isExpanded { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is this property expanded in the inspector?</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="isInstantiatedPrefab">
      <MemberSignature Language="C#" Value="public bool isInstantiatedPrefab { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is property part of a prefab instance? (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveArrayElement">
      <MemberSignature Language="C#" Value="public bool MoveArrayElement (int srcIndex, int dstIndex);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcIndex" Type="System.Int32"/>
        <Parameter Name="dstIndex" Type="System.Int32"/>
      </Parameters>
      <Docs>
        <param name="srcIndex">To be added.</param>
        <param name="dstIndex">To be added.</param>
        <summary>Move an array element from srcIndex to dstIndex.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="name">
      <MemberSignature Language="C#" Value="public string name { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of the property (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public bool Next (bool enterChildren);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enterChildren" Type="System.Boolean"/>
      </Parameters>
      <Docs>
        <param name="enterChildren">To be added.</param>
        <summary>Move to next property.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextVisible">
      <MemberSignature Language="C#" Value="public bool NextVisible (bool enterChildren);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enterChildren" Type="System.Boolean"/>
      </Parameters>
      <Docs>
        <param name="enterChildren">To be added.</param>
        <summary>Move to next visible property.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="objectReferenceInstanceIDValue">
      <MemberSignature Language="C#" Value="public int objectReferenceInstanceIDValue { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="objectReferenceValue">
      <MemberSignature Language="C#" Value="public UnityEngine.Object objectReferenceValue { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value of an object reference property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.ObjectReference" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="prefabOverride">
      <MemberSignature Language="C#" Value="public bool prefabOverride { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is property's value different from the prefab it belongs to?</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.isInstantiatedPrefab" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="propertyPath">
      <MemberSignature Language="C#" Value="public string propertyPath { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Full path of the property (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="propertyType">
      <MemberSignature Language="C#" Value="public UnityEditor.SerializedPropertyType propertyType { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEditor.SerializedPropertyType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Type of this property (Read Only).</summary>
        <value>To be added.</value>
        <remarks>(Read Only).</remarks>
      </Docs>
    </Member>
    <Member MemberName="rectValue">
      <MemberSignature Language="C#" Value="public UnityEngine.Rect rectValue { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value of a rectangle property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.Rect" />, <see cref="T:UnityEditor.Rect" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Move to first property of the object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="serializedObject">
      <MemberSignature Language="C#" Value="public UnityEditor.SerializedObject serializedObject { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEditor.SerializedObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:UnityEditor.SerializedObject" /> this property belongs to (Read Only).</summary>
        <value>To be added.</value>
        <remarks>(Read Only).</remarks>
      </Docs>
    </Member>
    <Member MemberName="stringValue">
      <MemberSignature Language="C#" Value="public string stringValue { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value of a string property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.String" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="tooltip">
      <MemberSignature Language="C#" Value="public string tooltip { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tooltip of the property (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="type">
      <MemberSignature Language="C#" Value="public string type { get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Type name of the property (Read Only)</summary>
        <value>To be added.</value>
        <remarks>(Read Only)</remarks>
      </Docs>
    </Member>
    <Member MemberName="vector2Value">
      <MemberSignature Language="C#" Value="public UnityEngine.Vector2 vector2Value { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.Vector2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value of a 2D vector property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.Vector2" />, <see cref="T:UnityEditor.Vector2" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="vector3Value">
      <MemberSignature Language="C#" Value="public UnityEngine.Vector3 vector3Value { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.Vector3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value of a 3D vector property.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.propertyType" />, <see cref="P:UnityEditor.SerializedPropertyType.Vector3" />, <see cref="T:UnityEditor.Vector3" />.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>