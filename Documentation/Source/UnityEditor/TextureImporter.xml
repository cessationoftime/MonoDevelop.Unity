<?xml version="1.0"?>
<Type Name="TextureImporter" FullName="UnityEditor.TextureImporter">
  <TypeSignature Language="C#" Value="public sealed class TextureImporter : UnityEditor.AssetImporter"/>
  <AssemblyInfo>
    <AssemblyName>UnityEditor</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UnityEditor.AssetImporter</BaseTypeName>
  </Base>
  <Interfaces/>
  <Docs>
    <summary>Texture importer lets you modify <see cref="T:UnityEditor.Texture2D" /> import settings from editor scripts.</summary>
    <remarks>(Read Only)</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextureImporter ();"/>
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters/>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="anisoLevel">
      <MemberSignature Language="C#" Value="public int anisoLevel { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Anisotropic filtering level of the texture.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.Texture.anisoLevel" />, <see cref="T:UnityEditor.texture assets" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="borderMipmap">
      <MemberSignature Language="C#" Value="public bool borderMipmap { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Keep texture borders the same when generating mipmaps?</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearPlatformTextureSettings">
      <MemberSignature Language="C#" Value="public void ClearPlatformTextureSettings (string platform);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="platform" Type="System.String"/>
      </Parameters>
      <Docs>
        <param name="platform">To be added.</param>
        <summary>Clear specific target platform settings</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="convertToNormalmap">
      <MemberSignature Language="C#" Value="public bool convertToNormalmap { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Convert heightmap to normal map?</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="correctGamma">
      <MemberSignature Language="C#" Value="public bool correctGamma { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("correctGamma Property deprecated. Use generateMipsInLinearSpace instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoesSourceTextureHaveAlpha">
      <MemberSignature Language="C#" Value="public bool DoesSourceTextureHaveAlpha ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Does textures source image have alpha channel.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoesSourceTextureHaveColor">
      <MemberSignature Language="C#" Value="public bool DoesSourceTextureHaveColor ();"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters/>
      <Docs>
        <summary>Does textures source image have RGB channels.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="fadeout">
      <MemberSignature Language="C#" Value="public bool fadeout { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Fade out mip levels to gray color?</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.mipmapEnabled" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="filterMode">
      <MemberSignature Language="C#" Value="public UnityEngine.FilterMode filterMode { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.FilterMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Filtering mode of the texture.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.Texture.filterMode" />, <see cref="T:UnityEditor.texture assets" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="generateCubemap">
      <MemberSignature Language="C#" Value="public UnityEditor.TextureImporterGenerateCubemap generateCubemap { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEditor.TextureImporterGenerateCubemap</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cubemap generation mode.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEditor.TextureImporterGenerateCubemap" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="generateMipsInLinearSpace">
      <MemberSignature Language="C#" Value="public bool generateMipsInLinearSpace { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Should mip maps be generated with gamma correction?</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.mipmapEnabled" /></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlatformTextureSettings">
      <MemberSignature Language="C#" Value="public bool GetPlatformTextureSettings (string platform, out int maxTextureSize, out UnityEditor.TextureImporterFormat textureFormat);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="platform" Type="System.String"/>
        <Parameter Name="maxTextureSize" Type="System.Int32&amp;" RefType="out"/>
        <Parameter Name="textureFormat" Type="UnityEditor.TextureImporterFormat&amp;" RefType="out"/>
      </Parameters>
      <Docs>
        <param name="platform">To be added.</param>
        <param name="maxTextureSize">To be added.</param>
        <param name="textureFormat">To be added.</param>
        <summary>Get platform specific texture settings</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlatformTextureSettings">
      <MemberSignature Language="C#" Value="public bool GetPlatformTextureSettings (string platform, out int maxTextureSize, out UnityEditor.TextureImporterFormat textureFormat, out int compressionQuality);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="platform" Type="System.String"/>
        <Parameter Name="maxTextureSize" Type="System.Int32&amp;" RefType="out"/>
        <Parameter Name="textureFormat" Type="UnityEditor.TextureImporterFormat&amp;" RefType="out"/>
        <Parameter Name="compressionQuality" Type="System.Int32&amp;" RefType="out"/>
      </Parameters>
      <Docs>
        <param name="platform">To be added.</param>
        <param name="maxTextureSize">To be added.</param>
        <param name="textureFormat">To be added.</param>
        <param name="compressionQuality">To be added.</param>
        <summary>Get platform specific texture settings</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="grayscaleToAlpha">
      <MemberSignature Language="C#" Value="public bool grayscaleToAlpha { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Generate alpha channel from intensity?</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="heightmapScale">
      <MemberSignature Language="C#" Value="public float heightmapScale { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Amount of bumpyness in the heightmap.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.convertToNormalmap" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="isReadable">
      <MemberSignature Language="C#" Value="public bool isReadable { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is texture data readable from scripts.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="lightmap">
      <MemberSignature Language="C#" Value="public bool lightmap { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is this texture a lightmap?</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="linearTexture">
      <MemberSignature Language="C#" Value="public bool linearTexture { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When in linear rendering should this texture be sampled with hardware gamma correction (sRGB) or without (linear)?</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="maxTextureSize">
      <MemberSignature Language="C#" Value="public int maxTextureSize { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Maximum texture size.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="mipMapBias">
      <MemberSignature Language="C#" Value="public float mipMapBias { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Mip map bias of the texture.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.Texture.mipMapBias" />, <see cref="T:UnityEditor.texture assets" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="mipmapEnabled">
      <MemberSignature Language="C#" Value="public bool mipmapEnabled { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Generate mip maps for the texture?</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="mipmapFadeDistanceEnd">
      <MemberSignature Language="C#" Value="public int mipmapFadeDistanceEnd { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Mip level where texture is faded out completely.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.mipmapEnabled" />, <see cref="P:UnityEditor.fadeout" />, <see cref="P:UnityEditor.mipmapFadeDistanceStart" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="mipmapFadeDistanceStart">
      <MemberSignature Language="C#" Value="public int mipmapFadeDistanceStart { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Mip level where texture begins to fade out.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.mipmapEnabled" />, <see cref="P:UnityEditor.fadeout" />, <see cref="P:UnityEditor.mipmapFadeDistanceEnd" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="mipmapFilter">
      <MemberSignature Language="C#" Value="public UnityEditor.TextureImporterMipFilter mipmapFilter { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEditor.TextureImporterMipFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Mipmap filtering mode.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEditor.TextureImporterMipFilter" />, <see cref="P:UnityEditor.mipmapEnabled" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="normalmap">
      <MemberSignature Language="C#" Value="public bool normalmap { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is this texture a normal map?</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="normalmapFilter">
      <MemberSignature Language="C#" Value="public UnityEditor.TextureImporterNormalFilter normalmapFilter { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEditor.TextureImporterNormalFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Normal map filtering mode.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEditor.TextureImporterNormalFilter" />, <see cref="P:UnityEditor.convertToNormalmap" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="npotScale">
      <MemberSignature Language="C#" Value="public UnityEditor.TextureImporterNPOTScale npotScale { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEditor.TextureImporterNPOTScale</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Scaling mode for non power of two textures.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEditor.TextureImporterNPOTScale" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadTextureSettings">
      <MemberSignature Language="C#" Value="public void ReadTextureSettings (UnityEditor.TextureImporterSettings dest);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="UnityEditor.TextureImporterSettings"/>
      </Parameters>
      <Docs>
        <param name="dest">To be added.</param>
        <summary>Read texture settings into <see cref="T:UnityEditor.TextureImporterSettings" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPlatformTextureSettings">
      <MemberSignature Language="C#" Value="public void SetPlatformTextureSettings (string platform, int maxTextureSize, UnityEditor.TextureImporterFormat textureFormat);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="platform" Type="System.String"/>
        <Parameter Name="maxTextureSize" Type="System.Int32"/>
        <Parameter Name="textureFormat" Type="UnityEditor.TextureImporterFormat"/>
      </Parameters>
      <Docs>
        <param name="platform">To be added.</param>
        <param name="maxTextureSize">To be added.</param>
        <param name="textureFormat">To be added.</param>
        <summary>Set specific target platform settings</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPlatformTextureSettings">
      <MemberSignature Language="C#" Value="public void SetPlatformTextureSettings (string platform, int maxTextureSize, UnityEditor.TextureImporterFormat textureFormat, int compressionQuality);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="platform" Type="System.String"/>
        <Parameter Name="maxTextureSize" Type="System.Int32"/>
        <Parameter Name="textureFormat" Type="UnityEditor.TextureImporterFormat"/>
        <Parameter Name="compressionQuality" Type="System.Int32"/>
      </Parameters>
      <Docs>
        <param name="platform">To be added.</param>
        <param name="maxTextureSize">To be added.</param>
        <param name="textureFormat">To be added.</param>
        <param name="compressionQuality">To be added.</param>
        <summary>Set specific target platform settings</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTextureSettings">
      <MemberSignature Language="C#" Value="public void SetTextureSettings (UnityEditor.TextureImporterSettings src);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="UnityEditor.TextureImporterSettings"/>
      </Parameters>
      <Docs>
        <param name="src">To be added.</param>
        <summary>Set texture importers settings from <see cref="T:UnityEditor.TextureImporterSettings" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="textureFormat">
      <MemberSignature Language="C#" Value="public UnityEditor.TextureImporterFormat textureFormat { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEditor.TextureImporterFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Format of imported texture.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEditor.TextureImporterFormat" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="textureType">
      <MemberSignature Language="C#" Value="public UnityEditor.TextureImporterType textureType { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEditor.TextureImporterType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Which type of texture are we dealing with here</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="wrapMode">
      <MemberSignature Language="C#" Value="public UnityEngine.TextureWrapMode wrapMode { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: UnityEngine.WrapperlessIcall</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UnityEngine.TextureWrapMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wrap mode (Repeat or Clamp) of the texture.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEditor.Texture.wrapMode" />, <see cref="T:UnityEditor.texture assets" />.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>