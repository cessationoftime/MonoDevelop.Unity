<?xml version="1.0"?>
<Type Name="FilterMode" FullName="UnityEngine.FilterMode">
  <TypeSignature Language="C#" Value="public enum FilterMode"/>
  <AssemblyInfo>
    <AssemblyName>UnityEngine</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Filtering mode for textures. Corresponds to the settings in a <see cref="T:UnityEngine.texture inspector" />.</summary>
    <remarks>See Also: <see cref="P:UnityEngine.Texture.filterMode" />, <see cref="T:UnityEngine.texture assets" />.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Bilinear">
      <MemberSignature Language="C#" Value="Bilinear"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.FilterMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bilinear filtering - texture samples are averaged.</summary>
        <remarks>See Also: <see cref="P:UnityEngine.Texture.filterMode" />, <see cref="T:UnityEngine.texture assets" />.&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;renderer.material.mainTexture.filterMode = <see cref="P:UnityEngine.FilterMode.Bilinear" />;&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;void Example() {        renderer.material.mainTexture.filterMode = <see cref="P:UnityEngine.FilterMode.Bilinear" />;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    def Example():        renderer.material.mainTexture.filterMode = <see cref="P:UnityEngine.FilterMode.Bilinear" />&lt;p class="details"&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Point">
      <MemberSignature Language="C#" Value="Point"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.FilterMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Point filtering - texture pixels become blocky up close.</summary>
        <remarks>See Also: <see cref="P:UnityEngine.Texture.filterMode" />, <see cref="T:UnityEngine.texture assets" />.&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;renderer.material.mainTexture.filterMode = <see cref="P:UnityEngine.FilterMode.Point" />;&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;void Example() {        renderer.material.mainTexture.filterMode = <see cref="P:UnityEngine.FilterMode.Point" />;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    def Example():        renderer.material.mainTexture.filterMode = <see cref="P:UnityEngine.FilterMode.Point" />&lt;p class="details"&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="Trilinear">
      <MemberSignature Language="C#" Value="Trilinear"/>
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.FilterMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Trilinear filtering - texture samples are averaged and also blended between mipmap levels.</summary>
        <remarks>See Also: <see cref="P:UnityEngine.Texture.filterMode" />, <see cref="T:UnityEngine.texture assets" />.&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;renderer.material.mainTexture.filterMode = <see cref="P:UnityEngine.FilterMode.Trilinear" />;&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;void Example() {        renderer.material.mainTexture.filterMode = <see cref="P:UnityEngine.FilterMode.Trilinear" />;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    def Example():        renderer.material.mainTexture.filterMode = <see cref="P:UnityEngine.FilterMode.Trilinear" />&lt;p class="details"&gt;</remarks>
      </Docs>
    </Member>
  </Members>
</Type>