<?xml version="1.0"?>
<Type Name="Light" FullName="UnityEngine.Light">
  <TypeSignature Language="C#" Value="public class Light : UnityEngine.Behaviour"/>
  <AssemblyInfo>
    <AssemblyName>UnityEngine</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UnityEngine.Behaviour</BaseTypeName>
  </Base>
  <Interfaces/>
  <Docs>
    <summary>Script interface for <see cref="T:UnityEngine.light components" />.</summary>
    <remarks>(Read Only). (null if there is none attached)</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Light ();"/>
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters/>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="attenuate">
      <MemberSignature Language="C#" Value="public bool attenuate { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="color">
      <MemberSignature Language="C#" Value="public UnityEngine.Color color { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The color of the light.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEngine.Light component" />&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;&lt;span class="hl-comment"&gt;// Darken the light completely over a period of 2 seconds.&lt;span class="hl-comment"&gt;&lt;span class="hl-keyword"&gt;function &lt;span class="hl-operator"&gt;Update () {    light.color -= <see cref="P:UnityEngine.Color.white" /> / 2.0 * <see cref="P:UnityEngine.Time.deltaTime" />;}&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;void &lt;span class="hl-operator"&gt;Update() {        light.color -= <see cref="P:UnityEngine.Color.white" /> / 2.0F * <see cref="P:UnityEngine.Time.deltaTime" />;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    def &lt;span class="hl-operator"&gt;Update():        light.color -= ((<see cref="P:UnityEngine.Color.white" /> / 2.0F) * <see cref="P:UnityEngine.Time.deltaTime" />)&lt;p class="details"&gt;&#xD;&#xD;Another example:</remarks>
      </Docs>
    </Member>
    <Member MemberName="cookie">
      <MemberSignature Language="C#" Value="public UnityEngine.Texture cookie { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.Texture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The cookie texture projected by the light.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEngine.Light component" />&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;&lt;span class="hl-comment"&gt;// Expose a reference to a texture in the inspector&lt;span class="hl-comment"&gt;&lt;span class="hl-keyword"&gt;var newCookie : <see cref="T:UnityEngine.Texture2D" />;    &lt;span class="hl-comment"&gt;// Assign the cookie&lt;span class="hl-comment"&gt;light.cookie = newCookie;&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;public <see cref="T:UnityEngine.Texture2D" /> newCookie;    &lt;span class="hl-keyword"&gt;void Example() {        light.cookie = newCookie;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    &lt;span class="hl-keyword"&gt;public newCookie as <see cref="T:UnityEngine.Texture2D" />    def Example():        light.cookie = newCookie&lt;p class="details"&gt;</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>Boo.Lang.DuckTyped</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="cullingMask">
      <MemberSignature Language="C#" Value="public int cullingMask { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is used to lights parts of the scene selectively.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEngine.Light component" />&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;&lt;span class="hl-comment"&gt;// Only light objects in the first layer (Default layer)&lt;span class="hl-comment"&gt;light.cullingMask = 1 &amp;lt;&amp;lt; 0;&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;void Example() {        light.cullingMask = 1 &amp;lt;&amp;lt; 0;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    def Example():        light.cullingMask = (1 &amp;lt;&amp;lt; 0)&lt;p class="details"&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="flare">
      <MemberSignature Language="C#" Value="public UnityEngine.Flare flare { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.Flare</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:UnityEngine.flare asset" /> to use for this light.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEngine.LensFlare.flare" />, <see cref="T:UnityEngine.Light component" /> and <see cref="T:UnityEngine.flare asset" />&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;&lt;span class="hl-comment"&gt;// Expose a reference to a flare in the inspector&lt;span class="hl-comment"&gt;&lt;span class="hl-keyword"&gt;var newFlare : <see cref="T:UnityEngine.Flare" />;&lt;span class="hl-comment"&gt;// Assign the flare&lt;span class="hl-comment"&gt;light.flare = newFlare;&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;public <see cref="T:UnityEngine.Flare" /> newFlare;    &lt;span class="hl-keyword"&gt;void Example() {        light.flare = newFlare;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    &lt;span class="hl-keyword"&gt;public newFlare as <see cref="T:UnityEngine.Flare" />    def Example():        light.flare = newFlare&lt;p class="details"&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLights">
      <MemberSignature Language="C#" Value="public static UnityEngine.Light[] GetLights (UnityEngine.LightType type, int layer);"/>
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.Light[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="UnityEngine.LightType"/>
        <Parameter Name="layer" Type="System.Int32"/>
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <param name="layer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="intensity">
      <MemberSignature Language="C#" Value="public float intensity { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The Intensity of a light is multiplied with the Light color.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="pixelLightCount">
      <MemberSignature Language="C#" Value="public static int pixelLightCount { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use QualitySettings.pixelLightCount instead.")</AttributeName>
        </Attribute>
      </Attributes>
    </Member>
    <Member MemberName="range">
      <MemberSignature Language="C#" Value="public float range { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The range of the light.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEngine.Light component" />&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;&lt;span class="hl-comment"&gt;// Pulse light's range between original range&lt;span class="hl-comment"&gt;&lt;span class="hl-comment"&gt;// and half of the original one&lt;span class="hl-comment"&gt;&lt;span class="hl-keyword"&gt;var duration : &lt;span class="hl-datatype"&gt;float = 3.0;&lt;span class="hl-keyword"&gt;private &lt;span class="hl-keyword"&gt;var originalRange : &lt;span class="hl-datatype"&gt;float;originalRange = light.range;&lt;span class="hl-keyword"&gt;function &lt;span class="hl-operator"&gt;Update() {    &lt;span class="hl-keyword"&gt;var amplitude : &lt;span class="hl-datatype"&gt;float = <see cref="P:UnityEngine.Mathf.PingPong" />( <see cref="P:UnityEngine.Time.time" />, duration );    &lt;span class="hl-comment"&gt;// transform from 0..duration to 0.5..1 range&lt;span class="hl-comment"&gt;    amplitude = amplitude / duration * 0.5 + 0.5;    &lt;span class="hl-comment"&gt;// set light range&lt;span class="hl-comment"&gt;    light.range = originalRange * amplitude;}&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;public &lt;span class="hl-datatype"&gt;float duration = 3.0F;    &lt;span class="hl-keyword"&gt;private &lt;span class="hl-datatype"&gt;float originalRange;    &lt;span class="hl-keyword"&gt;void &lt;span class="hl-operator"&gt;Update() {        &lt;span class="hl-datatype"&gt;float amplitude = <see cref="P:UnityEngine.Mathf.PingPong" />(<see cref="P:UnityEngine.Time.time" />, duration);        amplitude = amplitude / duration * 0.5F + 0.5F;        light.range = originalRange * amplitude;    }    &lt;span class="hl-keyword"&gt;void Example() {        originalRange = light.range;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    &lt;span class="hl-keyword"&gt;public duration as single = 3.0F    &lt;span class="hl-keyword"&gt;private originalRange as single    def &lt;span class="hl-operator"&gt;Update():        amplitude as single = <see cref="P:UnityEngine.Mathf.PingPong" />(<see cref="P:UnityEngine.Time.time" />, duration)        amplitude = (((amplitude / duration) * 0.5F) + 0.5F)        light.range = (originalRange * amplitude)    def Example():        originalRange = light.range&lt;p class="details"&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="renderMode">
      <MemberSignature Language="C#" Value="public UnityEngine.LightRenderMode renderMode { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.LightRenderMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>How to render the light.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEngine.Light component" />&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;&lt;span class="hl-comment"&gt;// Make the light only render with vertex lighting&lt;span class="hl-comment"&gt;light.renderMode = <see cref="P:UnityEngine.LightRenderMode.ForceVertex" />;&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;void Example() {        light.renderMode = <see cref="P:UnityEngine.LightRenderMode.ForceVertex" />;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    def Example():        light.renderMode = <see cref="P:UnityEngine.LightRenderMode.ForceVertex" />&lt;p class="details"&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="shadowConstantBias">
      <MemberSignature Language="C#" Value="public float shadowConstantBias { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="shadowObjectSizeBias">
      <MemberSignature Language="C#" Value="public float shadowObjectSizeBias { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="shadows">
      <MemberSignature Language="C#" Value="public UnityEngine.LightShadows shadows { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.LightShadows</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>How this light casts shadows?</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEngine.LightShadows" />, <see cref="P:UnityEngine.shadowStrength" /> property, <see cref="P:UnityEngine.Renderer.castShadows" />, <see cref="P:UnityEngine.Renderer.receiveShadows" />.&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;&lt;span class="hl-comment"&gt;// make the light cast hard shadows&lt;span class="hl-comment"&gt;light.shadows = <see cref="P:UnityEngine.LightShadows.Hard" />;&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;void Example() {        light.shadows = <see cref="P:UnityEngine.LightShadows.Hard" />;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    def Example():        light.shadows = <see cref="P:UnityEngine.LightShadows.Hard" />&lt;p class="details"&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="shadowStrength">
      <MemberSignature Language="C#" Value="public float shadowStrength { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strength of light's shadows</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="P:UnityEngine.shadows" /> property, <see cref="P:UnityEngine.Renderer.castShadows" />, <see cref="P:UnityEngine.Renderer.receiveShadows" />.&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;&lt;span class="hl-comment"&gt;// make light's shadows very faint&lt;span class="hl-comment"&gt;light.shadowStrength = 0.3;&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;void Example() {        light.shadowStrength = 0.3F;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    def Example():        light.shadowStrength = 0.3F&lt;p class="details"&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="spotAngle">
      <MemberSignature Language="C#" Value="public float spotAngle { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The angle of the light's spotlight cone in degrees.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEngine.Light component" />&#xD;&#xD;  &#xD;    &#xD;      &#xD;        &#xD;	 &lt;span class="cSelect-Selected"&gt;JavaScript&#xD;	 &#xD;		JavaScript&#xD;		C#&#xD;		Boo&#xD;	 &#xD;      &#xD;    &#xD;    &#xD;  &#xD;&lt;span class="hl-comment"&gt;// Change spot angle randomly between 'minAngle' and 'maxAngle'&lt;span class="hl-comment"&gt;&lt;span class="hl-comment"&gt;// each 'interval' seconds.&lt;span class="hl-comment"&gt;&lt;span class="hl-keyword"&gt;var interval : &lt;span class="hl-datatype"&gt;float = 0.3;&lt;span class="hl-keyword"&gt;var minAngle : &lt;span class="hl-datatype"&gt;float = 10;&lt;span class="hl-keyword"&gt;var maxAngle : &lt;span class="hl-datatype"&gt;float = 90;&lt;span class="hl-keyword"&gt;private &lt;span class="hl-keyword"&gt;var timeLeft : &lt;span class="hl-datatype"&gt;float;timeLeft = interval;light.type = <see cref="P:UnityEngine.LightType.Spot" />;&lt;span class="hl-keyword"&gt;function &lt;span class="hl-operator"&gt;Update () {    timeLeft -= <see cref="P:UnityEngine.Time.deltaTime" />;    &lt;span class="hl-keyword"&gt;if (timeLeft &amp;lt; 0.0) {        &lt;span class="hl-comment"&gt;// time to change!&lt;span class="hl-comment"&gt;        timeLeft = interval;        light.spotAngle = <see cref="P:UnityEngine.Random.Range" />( minAngle, maxAngle );    }}&lt;p class="details"&gt;&#xD;using UnityEngine;using System.Collections;&lt;span class="hl-keyword"&gt;public &lt;span class="hl-keyword"&gt;class example : <see cref="T:UnityEngine.MonoBehaviour" /> {    &lt;span class="hl-keyword"&gt;public &lt;span class="hl-datatype"&gt;float interval = 0.3F;    &lt;span class="hl-keyword"&gt;public &lt;span class="hl-datatype"&gt;float minAngle = 10;    &lt;span class="hl-keyword"&gt;public &lt;span class="hl-datatype"&gt;float maxAngle = 90;    &lt;span class="hl-keyword"&gt;private &lt;span class="hl-datatype"&gt;float timeLeft;    &lt;span class="hl-keyword"&gt;void &lt;span class="hl-operator"&gt;Update() {        timeLeft -= <see cref="P:UnityEngine.Time.deltaTime" />;        &lt;span class="hl-keyword"&gt;if (timeLeft &amp;lt; 0.0F) {            timeLeft = interval;            light.spotAngle = <see cref="P:UnityEngine.Random.Range" />(minAngle, maxAngle);        }    }    &lt;span class="hl-keyword"&gt;void Example() {        timeLeft = interval;        light.type = <see cref="P:UnityEngine.LightType.Spot" />;    }}&lt;p class="details"&gt;&#xD;&lt;span class="hl-keyword"&gt;import UnityEngine&lt;span class="hl-keyword"&gt;import System.Collections&lt;span class="hl-keyword"&gt;class example(<see cref="T:UnityEngine.MonoBehaviour" />):    &lt;span class="hl-keyword"&gt;public interval as single = 0.3F    &lt;span class="hl-keyword"&gt;public minAngle as single = 10    &lt;span class="hl-keyword"&gt;public maxAngle as single = 90    &lt;span class="hl-keyword"&gt;private timeLeft as single    def &lt;span class="hl-operator"&gt;Update():        timeLeft -= <see cref="P:UnityEngine.Time.deltaTime" />        &lt;span class="hl-keyword"&gt;if timeLeft &amp;lt; 0.0F:            timeLeft = interval            light.spotAngle = <see cref="P:UnityEngine.Random.Range" />(minAngle, maxAngle)    def Example():        timeLeft = interval        light.type = <see cref="P:UnityEngine.LightType.Spot" />&lt;p class="details"&gt;</remarks>
      </Docs>
    </Member>
    <Member MemberName="type">
      <MemberSignature Language="C#" Value="public UnityEngine.LightType type { set; get; }"/>
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UnityEngine.LightType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The type of the light.</summary>
        <value>To be added.</value>
        <remarks>See Also: <see cref="T:UnityEngine.Light component" /></remarks>
      </Docs>
    </Member>
  </Members>
</Type>